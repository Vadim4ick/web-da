import { NextResponse } from 'next/server'
import nodemailer from 'nodemailer'

export async function POST(req: Request) {
  try {
    const body = await req.json()
    const { name, phone, comment } = body

    if (!name || !phone) {
      return NextResponse.json({ error: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' }, { status: 400 })
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: Number(process.env.SMTP_PORT),
      secure: process.env.SMTP_SECURE === 'true', // true –¥–ª—è 465
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ
    const mailOptions = {
      from: `Web-da" <${process.env.SMTP_USER}>`,
      to: process.env.MAIL_TO,
      subject: '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ üöÄ',
      text: `
–ò–º—è: ${name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || '‚Äî'}
      `,
      html: `
        <h2>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</h2>
        <p><b>–ò–º—è:</b> ${name}</p>
        <p><b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}</p>
        <p><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${comment || '‚Äî'}</p>
      `,
    }

    await transporter.sendMail(mailOptions)

    const tgMessage = `üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\nüë§ –ò–º—è: ${name}\n üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || '‚Äî'}`
    await fetch(`https://api.telegram.org/bot${process.env.TG_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: process.env.TG_CHAT_ID, // üëà ID –≥—Ä—É–ø–ø—ã
        text: tgMessage,
        parse_mode: 'Markdown',
      }),
    })

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:', error)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}
